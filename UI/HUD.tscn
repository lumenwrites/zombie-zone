[gd_scene load_steps=19 format=2]

[ext_resource path="res://UI/Slot.tscn" type="PackedScene" id=1]
[ext_resource path="res://UI/HUD.gd" type="Script" id=2]
[ext_resource path="res://assets/icons/armor.png" type="Texture" id=3]
[ext_resource path="res://assets/icons/health.png" type="Texture" id=4]
[ext_resource path="res://assets/fonts/LilitaOne-Regular.ttf" type="DynamicFontData" id=5]
[ext_resource path="res://assets/icons/skull.png" type="Texture" id=6]
[ext_resource path="res://assets/fx/vignette.png" type="Texture" id=7]
[ext_resource path="res://assets/fx/screenshot.png" type="Texture" id=8]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform sampler2D vignette;
uniform float contrast;
uniform float saturation;
uniform float brightness;
uniform float transparency;
uniform float min_level;
uniform float set_gamma;
uniform float max_level;

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

vec3 gammaCorrect(vec3 color, float gamma){
    return pow(color, vec3(1.0/gamma));
}

vec3 levelRange(vec3 color, float minInput, float maxInput){
    return min(max(color - vec3(minInput), vec3(0.0)) / (vec3(maxInput) - vec3(minInput)), vec3(1.0));
}

vec3 finalLevels(vec3 color, float minInput, float gamma, float maxInput){
    return gammaCorrect(levelRange(color, minInput, maxInput), gamma);
}

vec3 ContrastSaturationBrightness(vec3 color, float con, float sat, float brt)
{
	// Increase or decrease theese values to adjust r, g and b color channels seperately
	const float AvgLumR = 0.5;
	const float AvgLumG = 0.5;
	const float AvgLumB = 0.5;
	
	const vec3 LumCoeff = vec3(0.2125, 0.7154, 0.0721);
	
	vec3 AvgLumin = vec3(AvgLumR, AvgLumG, AvgLumB);
	vec3 brtColor = color * brt;
	vec3 intensity = vec3(dot(brtColor, LumCoeff));
	vec3 satColor = mix(intensity, brtColor, sat);
	vec3 conColor = mix(AvgLumin, satColor, con);
	return conColor;
}

void fragment() {
	vec4 bg = texture(SCREEN_TEXTURE,SCREEN_UV); // Save what camera is looking at as a texture
	vec3 vignette_color = texture(vignette, UV).rgb;
	//vignette_color.rgb = vignette_color.rgb + vec3(brightness,brightness,brightness); 
	vignette_color.rgb = ContrastSaturationBrightness(vignette_color.rgb, contrast, saturation, brightness);
	//vignette_color.rgb = clamp(vignette_color.rgb, vec3(0,0,0), vec3(1,1,1)) ;
	vignette_color.rgb = finalLevels(vignette_color.rgb, min_level, set_gamma, max_level);
	float remapped = map(vignette_color.r, 0, 1, transparency,1);
	vignette_color.rgb = vec3(remapped,remapped,remapped);
	// Screen texture stores gaussian blurred copies on mipmaps.
	COLOR.rgb = textureLod(SCREEN_TEXTURE, SCREEN_UV, (1.0 - vignette_color.r) * 8.0).rgb;
	COLOR.rgb *= vignette_color;//texture(vignette, UV).rgb;
	//COLOR.rgb *= vignette_color;//texture(vignette, UV).rgb;
}

"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/contrast = 1.0
shader_param/saturation = 1.0
shader_param/brightness = 1.0
shader_param/transparency = 0.0
shader_param/min_level = 0.0
shader_param/set_gamma = 7.5
shader_param/max_level = 0.15
shader_param/vignette = ExtResource( 7 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform sampler2D vignette;
uniform float contrast;
uniform float saturation;
uniform float brightness;
uniform float transparency;
uniform float min_level;
uniform float set_gamma;
uniform float max_level;

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

vec3 gammaCorrect(vec3 color, float gamma){
    return pow(color, vec3(1.0/gamma));
}

vec3 levelRange(vec3 color, float minInput, float maxInput){
    return min(max(color - vec3(minInput), vec3(0.0)) / (vec3(maxInput) - vec3(minInput)), vec3(1.0));
}

vec3 finalLevels(vec3 color, float minInput, float gamma, float maxInput){
    return gammaCorrect(levelRange(color, minInput, maxInput), gamma);
}

vec3 ContrastSaturationBrightness(vec3 color, float con, float sat, float brt)
{
	// Increase or decrease theese values to adjust r, g and b color channels seperately
	const float AvgLumR = 0.5;
	const float AvgLumG = 0.5;
	const float AvgLumB = 0.5;
	
	const vec3 LumCoeff = vec3(0.2125, 0.7154, 0.0721);
	
	vec3 AvgLumin = vec3(AvgLumR, AvgLumG, AvgLumB);
	vec3 brtColor = color * brt;
	vec3 intensity = vec3(dot(brtColor, LumCoeff));
	vec3 satColor = mix(intensity, brtColor, sat);
	vec3 conColor = mix(AvgLumin, satColor, con);
	return conColor;
}

void fragment() {
	vec4 bg = texture(SCREEN_TEXTURE,SCREEN_UV); // Save what camera is looking at as a texture
	vec3 vignette_color = texture(vignette, UV).rgb;
	//vignette_color.rgb = vignette_color.rgb + vec3(brightness,brightness,brightness); 
	vignette_color.rgb = ContrastSaturationBrightness(vignette_color.rgb, contrast, saturation, brightness);
	vignette_color.rgb = finalLevels(vignette_color.rgb, min_level, set_gamma, max_level);
	
	//vignette_color.rgb = vec3(1,1,1) - vignette_color.rgb;
	//vignette_color.rgb *=  vec3(1,0,0);
	vec3 blood = vignette_color.rgb;
	blood.r = 1f;
	blood *= vignette_color.rgb;
	
	//float remapped = map(vignette_color.r, 0, 1, transparency,1);
	//vignette_color.rgb = vec3(remapped,remapped,remapped);
	// Screen texture stores gaussian blurred copies on mipmaps.
	COLOR.rgb = texture(SCREEN_TEXTURE,SCREEN_UV).rgb * blood.rgb;
	//COLOR.rgb = blood.rgb;

}

"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/contrast = 1.0
shader_param/saturation = 1.0
shader_param/brightness = 1.0
shader_param/transparency = 0.0
shader_param/min_level = 0.0
shader_param/set_gamma = 5.0
shader_param/max_level = 0.25
shader_param/vignette = ExtResource( 7 )

[sub_resource type="StyleBoxFlat" id=5]
bg_color = Color( 0.454902, 0.517647, 0.67451, 1 )

[sub_resource type="StyleBoxFlat" id=6]
bg_color = Color( 0.188235, 0.219608, 0.294118, 0.0431373 )

[sub_resource type="StyleBoxFlat" id=7]
bg_color = Color( 0.168627, 0.768627, 0.160784, 1 )

[sub_resource type="StyleBoxFlat" id=8]
bg_color = Color( 0.0941176, 0.141176, 0.101961, 0.509804 )

[sub_resource type="DynamicFont" id=9]
outline_size = 1
outline_color = Color( 0, 0, 0, 1 )
font_data = ExtResource( 5 )

[sub_resource type="DynamicFont" id=10]
size = 22
outline_size = 1
outline_color = Color( 0, 0, 0, 1 )
font_data = ExtResource( 5 )

[node name="HUD" type="CanvasLayer"]
script = ExtResource( 2 )

[node name="Screenshot" type="TextureRect" parent="."]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 8 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Vignette" type="ColorRect" parent="."]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PainEffect" type="ColorRect" parent="."]
modulate = Color( 1, 0.803922, 0.803922, 0 )
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="armor" type="Sprite" parent="."]
position = Vector2( 28.3799, 472.38 )
scale = Vector2( 0.773746, 0.773746 )
texture = ExtResource( 3 )

[node name="ArmorBar" type="ProgressBar" parent="."]
margin_left = 44.3799
margin_top = 460.38
margin_right = 194.38
margin_bottom = 485.38
custom_styles/fg = SubResource( 5 )
custom_styles/bg = SubResource( 6 )
value = 33.0
percent_visible = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="health" type="Sprite" parent="."]
position = Vector2( 28.2767, 504.277 )
scale = Vector2( 0.767296, 0.767296 )
texture = ExtResource( 4 )

[node name="HealthBar" type="ProgressBar" parent="."]
margin_left = 44.2767
margin_top = 492.277
margin_right = 194.277
margin_bottom = 517.277
custom_styles/fg = SubResource( 7 )
custom_styles/bg = SubResource( 8 )
value = 100.0
percent_visible = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Tooltip" type="Label" parent="."]
visible = false
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -89.0
margin_top = -108.0
margin_right = 89.0
margin_bottom = -89.0
custom_fonts/font = SubResource( 9 )
text = "Press E to pick up Weapon"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="skull" type="Sprite" parent="."]
position = Vector2( 22, 22 )
scale = Vector2( 0.2, 0.2 )
texture = ExtResource( 6 )

[node name="Score" type="Label" parent="."]
margin_left = 40.0
margin_top = 8.0
margin_right = 218.0
margin_bottom = 63.0
custom_fonts/font = SubResource( 10 )
text = "123"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Slots" type="Control" parent="."]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -184.0
margin_top = -52.0
margin_right = -184.0
margin_bottom = -52.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Slot1" parent="Slots" instance=ExtResource( 1 )]
margin_left = -144.0
margin_top = -3.05176e-05
margin_right = -144.0
margin_bottom = -3.05176e-05

[node name="Slot2" parent="Slots" instance=ExtResource( 1 )]
margin_left = -72.0
margin_top = -3.05176e-05
margin_right = -72.0
margin_bottom = -3.05176e-05

[node name="Slot3" parent="Slots" instance=ExtResource( 1 )]
margin_left = 0.0
margin_top = -3.05176e-05
margin_right = 0.0
margin_bottom = -3.05176e-05

[node name="Slot4" parent="Slots" instance=ExtResource( 1 )]
margin_left = 72.0
margin_top = -3.05176e-05
margin_right = 72.0
margin_bottom = -3.05176e-05

[node name="Slot5" parent="Slots" instance=ExtResource( 1 )]
margin_left = 140.0
margin_top = -3.05176e-05
margin_right = 140.0
margin_bottom = -3.05176e-05
